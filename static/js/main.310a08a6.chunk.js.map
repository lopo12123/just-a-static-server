{"version":3,"sources":["components/MPHands.js","App.js","index.js"],"names":["MPHands","webcamRef","useRef","canvasRef","useEffect","console","log","Hands","VERSION","hands","locateFile","file","setOptions","maxNumHands","minDetectionConfidence","minTrackingConfidence","onResults","current","Camera","video","onFrame","a","send","image","width","height","start","results","videoWidth","videoHeight","canvasElement","canvasCtx","getContext","save","clearRect","translate","scale","drawImage","multiHandLandmarks","landmarks","drawConnectors","HAND_CONNECTIONS","color","lineWidth","drawLandmarks","restore","audio","mirrored","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA8GeA,EArGC,WACd,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEzBE,qBAAU,WACRC,QAAQC,IAAIC,QAAMC,SAClB,IAAMC,EAAQ,IAAIF,QAAM,CACtBG,WAAY,SAACC,GAEX,MAAM,gEAAN,OAAuEA,OAG3EF,EAAMG,WAAW,CACfC,YAAa,EACbC,uBAAwB,GACxBC,sBAAuB,KAEzBN,EAAMO,UAAUA,GAGe,qBAAtBf,EAAUgB,SACK,OAAtBhB,EAAUgB,UAEK,IAAIC,SAAOjB,EAAUgB,QAAQE,MAAO,CACjDC,QAAQ,WAAD,4BAAE,sBAAAC,EAAA,sEACDZ,EAAMa,KAAK,CAAEC,MAAOtB,EAAUgB,QAAQE,QADrC,2CAAF,kDAAC,GAGRK,MAAO,KACPC,OAAQ,MAEHC,UAER,IAEH,IAAMV,EAAY,SAACW,GACjB,IAAMC,EAAa3B,EAAUgB,QAAQE,MAAMS,WACrCC,EAAc5B,EAAUgB,QAAQE,MAAMU,YAC5C1B,EAAUc,QAAQO,MAAQI,EAC1BzB,EAAUc,QAAQQ,OAASI,EAC3B,IAAMC,EAAgB3B,EAAUc,QAC1Bc,EAAYD,EAAcE,WAAW,MAY3C,GAXAD,EAAUE,OACVF,EAAUG,UAAU,EAAG,EAAGN,EAAYC,GACtCE,EAAUI,UAAUP,EAAY,GAChCG,EAAUK,OAAO,EAAG,GACpBL,EAAUM,UACRV,EAAQJ,MACR,EACA,EACAO,EAAcN,MACdM,EAAcL,QAEZE,EAAQW,mBAAoB,CAAC,IAAD,gBAENX,EAAQW,oBAFF,IAE9B,2BAAoD,CAAC,IAA1CC,EAAyC,QAClDC,yBAAeT,EAAWQ,EAAWE,mBAAkB,CACrDC,MAAO,UACPC,UAAW,IAEbC,wBAAcb,EAAWQ,EAAW,CAAEG,MAAO,UAAWC,UAAW,KAPvC,+BAUhCZ,EAAUc,WAGZ,OACE,gCACE,cAAC,IAAD,CACEC,OAAO,EACPC,UAAU,EACVC,IAAK/C,EACLgD,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,IACNC,MAAO,IACPC,UAAW,SACXC,OAAQ,EACRhC,MAAO,IACPC,OAAQ,OAGZ,wBACEuB,IAAK7C,EACL8C,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,IACNC,MAAO,IACPC,UAAW,SACXC,OAAQ,EACRhC,MAAO,IACPC,OAAQ,WCvFHgC,MAXf,WACE,OACE,mCACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.310a08a6.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Hands, HAND_CONNECTIONS } from \"@mediapipe/hands/hands\";\r\nimport {\r\n  drawConnectors,\r\n  drawLandmarks,\r\n} from \"@mediapipe/drawing_utils/drawing_utils\";\r\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\r\n\r\nconst MPHands = () => {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(Hands.VERSION);\r\n    const hands = new Hands({\r\n      locateFile: (file) => {\r\n        \r\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.3.1626903359/${file}`;\r\n      },\r\n    });\r\n    hands.setOptions({\r\n      maxNumHands: 2,\r\n      minDetectionConfidence: 0.5,\r\n      minTrackingConfidence: 0.5,\r\n    });\r\n    hands.onResults(onResults);\r\n\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null\r\n    ) {\r\n      const camera = new Camera(webcamRef.current.video, {\r\n        onFrame: async () => {\r\n          await hands.send({ image: webcamRef.current.video });\r\n        },\r\n        width: 1280,\r\n        height: 720,\r\n      });\r\n      camera.start();\r\n    }\r\n  }, []);\r\n\r\n  const onResults = (results) => {\r\n    const videoWidth = webcamRef.current.video.videoWidth;\r\n    const videoHeight = webcamRef.current.video.videoHeight;\r\n    canvasRef.current.width = videoWidth;\r\n    canvasRef.current.height = videoHeight;\r\n    const canvasElement = canvasRef.current;\r\n    const canvasCtx = canvasElement.getContext(\"2d\");\r\n    canvasCtx.save();\r\n    canvasCtx.clearRect(0, 0, videoWidth, videoHeight);\r\n    canvasCtx.translate(videoWidth, 0);\r\n    canvasCtx.scale(-1, 1);\r\n    canvasCtx.drawImage(\r\n      results.image,\r\n      0,\r\n      0,\r\n      canvasElement.width,\r\n      canvasElement.height\r\n    );\r\n    if (results.multiHandLandmarks) {\r\n      \r\n      for (const landmarks of results.multiHandLandmarks) {\r\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {\r\n          color: \"#00FF00\",\r\n          lineWidth: 5,\r\n        });\r\n        drawLandmarks(canvasCtx, landmarks, { color: \"#FFFFFF\", lineWidth: 2 });\r\n      }\r\n    }\r\n    canvasCtx.restore();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Webcam\r\n        audio={false}\r\n        mirrored={true}\r\n        ref={webcamRef}\r\n        style={{\r\n          position: \"absolute\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          left: \"0\",\r\n          right: \"0\",\r\n          textAlign: \"center\",\r\n          zindex: 9,\r\n          width: 800,\r\n          height: 600,\r\n        }}\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        style={{\r\n          position: \"absolute\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          left: \"0\",\r\n          right: \"0\",\r\n          textAlign: \"center\",\r\n          zindex: 9,\r\n          width: 800,\r\n          height: 600,\r\n        }}\r\n      ></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MPHands;\r\n","import MPHands from \"./components/MPHands\";\r\n// import MPFaceMesh from \"./components/MPFaceMesh\";\r\n// import MPHolistic from \"./components/MPHolistic\";\r\n// import MPSelfieSegmentation from \"./components/MPSelfieSegmentation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <MPHands />\r\n      {/* <MPFaceMesh /> */}\r\n      {/* <MPHolistic /> */}\r\n      {/* <MPSelfieSegmentation /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}